


1.	陣列(array)：一種資料結構，用來儲存多筆相同資料型態的資料，每一筆資料稱為元素
(element)。
2.	陣列會使用連續的記憶體  間，從第 1 個元素開始，依序儲存。
3.	宣告陣列的語法：
資料型態  陣列名稱［元素個數］

4.	指定陣列元素的初始值
(1)	在宣告陣列時，同時指定元素個數與元素的初始值：
資料型態 陣列名稱［元素個數］ ＝ ｛初始恒 1， 初始恒 2， ...}；
(2)	在宣告陣列時，不指定元素個數，但指定各元素的初始值，編譯器會依大括號內的初始值數量，自動判斷元素個數：
資料型態 陣列名稱［ ］ ＝ ｛恒 1， 恒 2， ...}；

5.	元素的存取方式：
(1)	使用索引(index)的方式存取陣列元素，索引的最小值為  0，最大值為元素個數-1
(2)	陣列的第 1 個元素，其索引值為 0
(3)	指定陣列元素的內容
陣列名稱［索引恒］ ＝ 恒；
(4)	將陣列元素的內容指定給其它變數
變數 ＝ 陣列名稱［索引恒］；
6.	陣列通常會搭配迴圈使用，以迴圈的控制變數為索引值，循序走訪每一個元素。

1.  int i, A[3];
2. for (i=0; i<3; i++){
3.	A[i]=i;	/* 指定陣列 A[]的元素分�為 0丶1丶2 */
4. }
5. for (i=0; i<3; i++){
6.	printf("%d", A[i]);	/* 輸出陣列 A[]的每—元素，顯示 012 */
7. }

2
 


7.	在  c  語言中，沒有「字串j資料型態，而是使用字元陣列來表示字串，且在字元陣列的最後，會自動加上一個結束字元'\0'。
8.	字元陣列的名稱，即為該字串的內容。下列範例皆是宣告字元陣列的方式，每個字元陣列
都包含 6 個元素。

1.   char  name1[6]={'m','a','r','i','o','\0'};
2. char name2[6]="mario";
3.   char  name3[]={'m','a','r','i','o','\0'};
4. char name4[]="mario";
5.  printf("%s\n", name1);	/* printf()使用格式字元「%sj輸出字串，印出 mario */
6. printf("%s\n", name2);	/* 印出mario */
7. printf("%s\n", name3);	/* 印出mario */
8. printf("%s\n", name4);	/* 印出mario */
9.	c++語言有提供字串  string  資料型別，使用前需引用<string>函式庫。

1. #include <string>  //引用函式庫標頭檔 <string>
2. :
3. string name = "mario";	/* 變數name 為 string 資料型態 */
4. cout << name << endl;	/* 使用cout 物件輸出變數內容 */
10.	使用 sizeof( )函式，可以取得陣列使用的記憶體  間大小，

1.  int A[] = {1,2,3,4,5};
2. char S[] = "Happy";
3.
4.  printf("%d\n", sizeof(A));  /* int 型態為 4Byte，5 個元素共 20BYTE，輸出 20 */
5. printf("%d\n", sizeof(S)); /* char 型態為 1Byte，6 個元素（需考慮結束字元'\0')共 6BYTE，
輸出 6 */











3
 


01	
在 c 語言中宣告一個 int 資料型態的整數陣列，該陣列有 5 個元素，已知第 1 個元素的記憶體位址為 0x42EF5A，則最後 1 個元素的位址為何？
   int 資料型態的大小為 4Byte，因此陣列的每個元素大小皆為 4Byte，所以第 5 個元素的位址為 0x42EF5A+(1)＊4 = 0x42EF6A








小明的第  1  次段考成績如下，請使用一維陣列結構，幫他寫一支計算平均成績的程式。
國文	英文	數學	基本電學	
85	80	90	96	88

程式碼：
1. #include <stdio.h>
2.
3. int main(){
4.	int score[5]={85,80,90,96,88};
5.	float avg;
6.	for (int i=0;i<5;i++)
7.	avg=avg+score[i];
8.	avg=avg/5;
9.	printf("平均成續:%f", avg);
10. }
程式說明：
行數	說明
4	宣告整數陣列 score，指定 5 個元素的初始值。
6，7	使用迴圈走訪陣列，將各元素加總至變數  avg。
8	計算平均值。



4	
 


某公司的每月營業額如下表，請設計一程式，執行該程式會輸出營業額最高的月份以及該月的營業額。

月份	1	2	3	4	5	6	7	8	9	10	11	12
營業額
（仟萬）	900	850	925	1012	936	998	1019	899	986	978	1002	1011

程式碼：
 
程式說明：
行數	說明
4	宣告整數陣列 money，記錄每月的營業額，money[0]為 1 月的營業額，money[1]為 2 月的營業額，以此類推。
5	(1)	變數 max 記錄陣列中最大值的索引。
(2)	初始假設 1 月的營業額最高（陣列的第 1 個元素，索引值為 0），故指定 max 的初始值為 0。
6 ~ 9	從 money[1]開始，依序和 money[max]比較，使 max 永遠為目前最大值的索引，此迴圈結束後，max 的值為 6。
10 ~ 11	輸出營業額最高的月份和該月營業額。



某期的樂透開獎號碼是 5， 17， 34， 19， 2， 29，請將此 6 個號碼由小到大排序。

程式碼：
1. #include <stdio.h>
2.
3. int main(){
4.	int lottery[]={5, 17, 34, 19, 2, 29};
5.	int i,j,tmp;
6.	for (i=4; i>=0; i--){
7.	for (j=0; j<=i; j++){
8.	if(lottery[j]>lottery[j+1]){
9.	tmp=lottery[j];
10.	lottery[j]=lottery[j+1];
11.	lottery[j+1]=tmp;
12.	}
13.	}
14.	}
15.	printf("本期樂透開獎號碼：");
16.	for(i=0;i<6;i++)
17.	printf("%d",lottery[i]);
18. }





1. 宣告二維陣列的語法：
資料型態  陣列名稱［列數］［行數］

2. 宣告二維陣列的同時，除了指定列數與行數外，也可以同時指定陣列元素的初始值。

1.  int ball[3][4] = {{0,1,2,3},
2. {4,5,6,7},
3. {8,9,10,11},
4. }; /* 宣告—個 3 列 4 行的二維陣列，同時指定元素初始恒 */
另外也可以在宣告時不指定列數和行數，但指定各元素的初始值，由編譯器決定陣列的大小。

1.  int ball[][] = {{0,1,2,3},
2. {4,5,6,7},
3. {8,9,10,11},
4. }; /* 不指定列行數，但指定元素初始恒 */

11  
 


上述兩個程式片段執行後，陣列 ball[3][4]的內容相同，下圖可以具體的呈現二維陣列中各元素間的相對位置：





3. 二維陣列在存取時，需同時使用列索引和行索引，
(1)   指定陣列元素的內容
陣列名稱［列索引］ ［行索引］ ＝ 恒；
(2)   將陣列元素的內容指定給其它變數
變數 ＝ 陣列名稱［列索引］ ［行索引］；
1.  int ball[3][4] = {{0,1,2,3},
2. {4,5,6,7},
3. {8,9,10,11},
4. }; /* 宣告—個 3 列 4 行的二維陣列，同時指定元素初始恒 */
5.
6. printf("%d\n", ball[1][2]); /* 第 1 列第 2 行，顯示 6 */
7. ball[1][2]= 99; /* 將第 1 列第 2 行的恒，指定為 99 */

4. 在程式中，使用巢狀迴圈走訪二維陣列的方式：
(1)   以列為主（Row-ma」or）（行優先）：




1.  for (int i=0;i<3;i++){ /* 第 i 列 */
2. for (int j=0;j<4;j++){  /* 第 j 行 */
3. printf("%d,\n", ball[i][j]);  /* 輸出 0,1,2,3,4,5,6,7,8,9,10,11 */
4. }
5. }






12  
 
Chapter 5  陣列與指標

(2)   以行為主（column-ma」or）（列優先）：




1.  for (int j=0;j<4;j++){ /* 第 j 行 */
2. for (int i=0;i<3;i++){  /* 第 i 列 */
3. printf("%d\n", ball[i][j]);   /* 輸出 0,4,8,1,5,9,2,6,10,3,7,11 */
4. }
5. }
5. 實際上，cIc++語言採用以列為主（Row-ma」or）（行優先）的方式，將二維陣列的元素存放在連續的記憶體位置，以上述的陣列 ball[3][4]為例，各元素在記憶體中的儲存位置如下圖，因此在撰寫程式時，使用以列為主（行優先）的方式走訪陣列，執行效率較佳。

6. 三維陣列：將多個相同資料型態與大小的二維陣列疊在一起。

上面這行程式碼，宣告一個 5 頁 3 列 4 行的 3 維陣列，如下圖所示。






2020 中華職棒總冠軍戰打滿 7 場，獅、象 2 家各場的得分如下，請幫聯盟撰寫一程式，計算
兩家 7 場的總得分。

   第 1 場 第 2 場 第 3 場 第 4 場 第 5 場 第 6 場 第 7 場
獅  4  1  1  3  6  12 7
象  2  9  5  6  0  1  4

程式碼：
 



1. 在記憶體內，以 1 Byte 作為一個基本的儲存單位，每個儲存單位都有一個編號，稱之為位
址，通常用 16 進位表示。
2. 程式執行時，會依據變數的資料型態，配置適當大小的記憶體  間，例如 int 型態的大小為 4 Byte，作業系統會在記憶體中配置 4 個儲存單位。

這行程式碼，會佔用記憶體 4 個儲存單位，其內容為 10，使用變數名稱 value 存取內容（變數值），記憶體內容如右圖，
3. 透過變數存取記憶體特定位置的資料，優點是不會不小心改到記憶體其它位置的資料，造成不可預期的錯誤，但缺點是無法得知資料在記憶體中的眞正位址，較無彈性。
4. 在 cIc++語言中，使用「指標j表示資料所在的記憶體位置，換言之，指標就是「記憶體位址j，要取得某個變數的記憶體位址，需使用取址運算子「＆j，語法如下：
&變數

17  
 


5. 要記錄記憶體位址，必需使用特殊的變數，稱為「指標變數(Point  Variable)j，就像整數變數記錄整數一樣，指標變數記錄的是指標(位址)。
6. 指標變數的宣告語法：
資料型態  ＊指標變數名稱
或
資料型態＊  指標變數名稱
宣告指標變數時的資料型態，指的並非是指標變數的資料型態(指標變數只能存放位址)，而是該指標指向的變數的資料型態。

7. 將變數 value 的位址指定給指標變數 ptr，亦即，指標變數 ptr 指向變數 value。

8. 指標變數的值必須是記憶體位址，不可以是常數，若暫時不指定位址，最好先將指標變數指定為 NULL。
9. 要存取指標變數指向的記憶體位址的內容(即指向的變數值)，需使用取值運算元「＊j，語法如下：
＊指標變數
10.   以下程式碼說明變數 value 和指標變數 ptr 之間的關係，並整理成下表，

1. int value=10;  /* 宣告—個整數變數value */
2. int *ptr;   /* 宣告—個指標變數ptr */
3.  ptr = &value; /* 將變數 value 的位址，指定給指標變數 ptr（ptr 指向value) */
4. printf("%d\n", value); /* 變數value 的恒 */
5. printf("%p\n", &value); /* 變數value 的位址 */
6. printf("%p\n", ptr); /* 指標變數 ptr 的恒 */
7. printf("%d\n", *ptr);   /* 指標變數ptr 指向的記憶體位址內容 */
8. printf("%p\n", &ptr);   /* 指標變數ptr 的位址 */

   恒  說明
value 10 變數 value 的值
＆value   0062cD40 變數 value 的記憶體位址
ptr   0062cD40 指標變數 ptr 的值，即變數 value 的位址
＊ptr  10 指標變數 ptr 指向的記憶體位址的內容，即變數 value 的值
＆ptr  0062cD50 指標變數 ptr 本身的記憶體位址(指標變數也是變數，同樣會被儲存
在記憶體中的某個位置)

18  
 
Chapter 5  陣列與指標

記憶體內容如下圖：

11.   指標變數只能進行+、-、++、--四種運算，運算的結果會改變指向的記憶體位址，每次變化的基本單位是指向資料的大小(以上述程式碼的整數指標變數 ptr 為例，執行 ptr++後，因整數大小為 4 Byte，ptr 的內容會從 0x62cD40 變為 0x62cD44)。
12.   陣列名稱又被用來表示陣列第 1 個元素的位址，所以陣列名稱可視為是指向該陣列的陣列指標變數。
13.   陣列指標變數只能指向陣列的第 1 個元素，不可以指向其它變數。
14.   下列程式碼說明陣列名稱與陣列元素間的關係，並整理成下表，

1.  int val[3]={10,20,30};
2. printf("%p\n", &val[0]);   /* 陣列第 1 個元素的記憶體位址 */
3. printf("%p\n", val); /* 陣列名稱是第 1 個元素的記憶體位址 */
4. printf("%p\n", val+1);  /* 第 2 個元素的記憶體位址 */
5. printf("%p\n", val+2);  /* 第 3 個元素的記憶體位址 */
6. printf("%d\n", *val);   /* 對陣列名稱取恒，即第 1 個元素的恒 */
7. printf("%d\n", *(val+1));  /*第 2 個元素的恒 */
8. printf("%d\n", *(val+2));  /*第 3 個元素的恒 */

   恒  說明
＆val[0]  0062FE20 第 1 個元素的記憶體位址
val   0062FE20 陣列的名稱，代表該陣列第 1 個元素的記憶體位址
val+1 0062FE24 第 2 個元素的記憶體位址
val+2 0062FE28 第 3 個元素的記憶體位址
＊val  10 陣列第 1 個元素的值，即 val[0]
＊(val+1) 20 陣列第 2 個元素的值，即 val[1]
＊(val+2) 30 陣列第 3 個元素的值，即 val[2]
記憶體內容如下圖：




15.   C 語言除了使用字元陣列表示字串，也可以將字串直接指定給字元指標變數，以下程式碼說明如何使用字元陣列或字元指標變數處理字串。
1. char strA[]="SuperMario";  /* 宣告字元陣列 strA[]，陣列名稱STRA 為第 1 個字元'S'的位址  */
2. char *strP="PokemonGo"; /* 宣告字元指標變數 strP，strP 的恒為第 1 個字元'P'的位址 */
3.
4. printf("%s\n", strA);   /* 格式字元「%sj，輸出字串 SuperMario */
5. printf("%s\n", strA+5); /* 格式字元「%sj，輸出字串 Mario */
6. printf("%s\n", strP);   /* 格式字元「%sj，輸出字串 PokemonGo */
7. printf("%s\n", strP+7); /* 格式字元「%sj，輸出字串 Go */
8.
9. printf("%c\n", *strA);  /* 格式字元「%cj，輸出 strA 指向的字元 S */
10. printf("%c\n", *(strA+5));   /* 格式字元「%cj，輸出 strA+5 指向的字元M */
11. printf("%c\n", *strP); /* 格式字元「%cj，輸出 strP 指向的字元 P */
12. printf("%c\n", *(strP+7));   /* 格式字元「%cj，輸出 strP+7 指向的字元G */

07 
執行以下之程式碼後，a、b、*p、*q  的值分別為何？

1. #include <stdio.h>
2.  main()
3. {
4. int a=40, b=51;
5. int *p, *q;
6. p = &a;
7. q = &b;
8. (*p)++;
9. (*q)++;
10.   q = p;
11.   printf("%d,%d,%d,%d", a, b, *p, *q);
12. }
