



1.	函式(Function)或副程式(Subroutine)：將特定功能或常用的程式碼獨立成一個區塊，使用函式有以下優點：
(1)	程式模組化、結構化。
(2)	增加程式的可讀性。
(3)	使程式易於維護。
2.	主函式 main( )也是一種函式，是程式執行的進入點。
3.	cIc++語言提供標準函式庫，稱為公用函式或內建函式，一個函式庫就是多個同類型函式的集合。
4.	標頭檔(head  file)：副檔名為.h，用來描述函式庫內所有函式的特性和名稱，例如  math.h
是數學函式庫的標頭檔。
5.	ANSI c 中常見的標準函式庫如下表：
函式庫	C 標頭檔	C丑丑標頭檔
數學運算	<math.h>	<cmath>
輸入、輸出	<stdio.h>	<iostream>
日期、時間	<time.h>	<ctime>
數值轉換、亂數、動態記憶體	<stdlib.h>	<cstdlib>
字串處理	<string.h>	<cstring>
6.	在使用函式前，需先使用前置處理器指令引用函式庫，語法如下：
#include <函式庫標頭檔>
7.	常見的函式：
<math.h>的數學函式
函式	說明	範例
double exp(double x)	指數 ex	exp(1) = 2.71828
double log(double x)	自然對數 logex(lnx)	log(2.71828) = 1
double log10(double x)	10 為底的對數 log10x	log10(100) = 2
double pow(double x， double y)	xy	pow(10， 2) = 100
double sqrt(double x)	x 的平方根	sqrt(100) = 10
double ceil(double x)	大於或等於 x 的最小整數	ceil(5.4) = 6
ceil(-5.4) = -5
double floor(double x)	小於或等於 x 的最大整數	floor(5.4) = 5
floor(-5.4) = -6
double hypot(double x， double y)
x2  y2	hypot(6， 8) = 10

2
 


函式	說明	範例

double round(double x)	四捨五入	round(4.4) = 4
round(4.5) = 5
round(-4.5) = -5
double abs(double x)	絕對值	abs(-3) = 3
		計算 sin 45°：
		角度 45°，則徑度
double sin(double A)	正弦函式 sinA，參數 A 需以徑度表示	
		= 45*3.14/180 = 0.785
		sin(0.785) = 0.707
double cos(double A)	餘弦函式 cosA，參數 A 需以徑度表示	計算 cos 45°： cos(0.785) = 0.707
double tan(double A)	正切函式 tanA，參數 A 需以徑度表示	計算 tan 45°： tan(0.785) = 1
double asin(double A)	反正弦函式 sin-1A，回傳徑度	asin(0.707) = 0.785
double acos(double A)	反餘弦函式 cos-1A，回傳徑度	acos(0.707) = 0.785
double atan(double A)	反正切函式 tan-1A，回傳徑度	atan(1) = 0.785
<stdlib.h>的亂數函式
函式	說明	範例

void srand(unsigned int seed)	初始化亂數函式，指定亂數種子	srand(time(NULL));
time(NULL)為從 1970 年 1 月 1 日到目前為止的秒數，以此當做亂數種子

int rand(void)	隨機產 介於0 到32767 之間的整數	rand( )%100;  產  0~99 之間的亂數值
rand( )%47;	產  0~46 之間的亂數值
rand( )%47+1; 產  1~47 之間的亂數值
<string.h>的字串處理函式
函式	說明	範例
size_t strlen(char s[ ])	回傳字串長度，不包含結束
字元’\0’	三個字元陣列如下：
char s1[20] = "LeBron"; char s2[20] = "James"; char s3[20] = "";
strlen(s1); 取得 s1 的長度，回傳值為
6 (不包含結束字元’\0’) strcpy(s3, s1); s3 的值為 LeBron strncpy(s3, s1, 2); s3 的值為 Le
strcat(s1, s2); s1 的值為 LeBronJames strncat(s1, s2, 2); s1 的值為 LeBronJa strcmp(s1, s2); 比較字串 s1 和 s2，回傳值為 1(L 的 ASCII 碼為 7610，J 的 ASCII 碼為 7410，故 s1>s2)
char[ ] strcpy(char s1[ ], char s2[ ])	複製 s2 到 s1	
char[ ] strncpy(char s1[ ], char s2[ ],
size_t n)	複製 s2 的前n 個字元到 s1	
char[ ] strcat(char s1[ ], char s2[ ])	將 s2 連接到 s1 之後	
char[ ] strncat(char s1[ ], char s2[ ],
size_t n)	將 s2 的前 n 個字元，連接
到 s1 之後	
int strcmp(char s1[ ], char s2[ ])	由左至右逐一比較 s1 和 s2
的每個字元(ASCII 碼)， s1=s2，回傳值=0 s1>s2，回傳值>0 s1<s2，回傳值<0	

3
 


以 strcpy ( )為例，另—種表示方式是 char ＊strcpy(char ＊s1， char ＊s2)，其中 CHAR ＊S1 和 CHAR[ ] S1 都是表示「指向字元的指標J，但使用 char[ ] s1 可以更清楚的表示是「指向字元陣列的第 1 個元素j。
01	
設計一程式，由使用者輸入任意角度，計算其 sin、cos、tan  等三角函數後輸出。

程式碼：
1. #include <stdio.h>
2.  #include <math.h>
3.
4. int main(){
5.	const double PI=3.14;
6.	double degree, radian;
7.	double sinVal, cosVal, tanVal;
8.
9.	printf("請輸入角度：");
10.	scanf("%lf", &degree);
11.
12.	radian = degree*PI/180;
13.	sinVal = sin(radian);
14.	cosVal = cos(radian);
15.	tanVal = tan(radian);
16.
17.	printf("sin%d = %lf\n", degree, sinVal);
18.	printf("cos%d = %lf\n", degree, cosVal);
19.	printf("tan%d = %lf\n", degree, tanVal);
20. }
程式碼說明：
行數	說明
2	引用<math.h>函式庫標頭檔。
5	宣告常數 PI = 3.14。
9 ~ 10	使用者輸入角度。
12	計算徑度，徑度=角度＊3.14I180。
13 ~ 14	使用數學函式庫<math.h>提供的函式，計算三角函數。



4	
 


02	
設計一剪刀、石頭、布的猜拳程式，由電腦隨機出拳，和使用者猜拳後輸出勝負結果。

程式碼：
1. #include <stdio.h>
2. #include <stdlib.h>
3. #include <time.h>
4.
5. int main(){
6.	int pc, user;
7.
8.	srand(time(NULL));
9.	pc=rand()%3;
10.
11.	printf("請輸入數字(0:剪刀 1:石頭 2:布)");
12.	scanf("%d", &user);
13.
14.	switch(pc){
15.	case 0:
16.	printf("電腦出剪刀,");
17.	if (user == 0) printf("你出剪刀，平手\n");
18.	else if (user == 1) printf("你出石頭，你贏了！\n");
19.	else if (user == 2) printf("你出布，你輸了！\n");
20.	break;
21.	case 1:
22.	printf("電腦出石頭\n");
23.	if (user == 0) printf("你出剪刀，你輸了\n");
24.	else if (user == 1) printf("你出石頭，平手！\n");
25.	else if (user == 2) printf("你出布，你贏了！\n");
26.	break;
27.	case 2:
28.	printf("電腦出布\n");
29.	if (user == 0) printf("你出剪刀，你贏了\n");
30.	else if (user == 1) printf("你出石頭，你輸了！\n");
31.	else if (user == 2) printf("你出布，平手！\n");
32.	break;
33.	}
34. }

5	
 


程式碼說明：
行數	說明
1 ~ 3	引用函式庫標頭檔。
6	變數 pc 代表電腦出的拳，user 代表使用者出的拳。
8， 9	利用 srand( )和 rand( )函式，隨機產  0 到 2 之間的整數，0、1、2 分別代表剪刀、石頭、布。
11， 12	使用者輸入數字，0、1、2  分別代表剪刀、石頭、布。
14 ~ 33	判斷勝負並輸出結果。



1.	函式是獨立的程式碼區塊，可以輸入外部資料，也可以將資料輸出。
2.	在程式中呼叫函式的時機：
(1)	在主函式 main( )中呼叫函式。
(2)	在函式 A( )中呼叫函式 B( )。
(3)	在函式中呼叫自已，又稱為遞迴函式。
3.	引數與參數：
(1)	呼叫函式時，傳遞給函式的值，稱為引數(Argument)。
(2)	函式被呼叫時，負責接收資料的變數，稱為參數(Parameter)。
4.	當函式有回傳值時，在函式的程式碼區塊內，使用關鍵字 return 將資料回傳，回傳後函式隨即結束，而寫在 return 之後的程式碼，將不會被執行。
5.	若函式沒有回傳值，則在函式名稱之前使用  void  關鍵字表示沒有回傳值。
6.	自訂函式包含宣告和定義(實作)2  個部份，語法如下：
(1)	宣告函式原型：規範回傳值與參數的資料型態，需在主函式 main( )與函式定義之前宣告。
回傳恒資料型態  函式名稱(參數資料型態, …);




(2)	定義函式：負責參數宣告與程式區塊實作，若定義寫在主函式 main( )之前，則可以省略上述的函式原型宣告。
回傳恒資料型態 函式名稱(參數資料型態 參數名稱, …){ 程式碼區塊 }


7.	呼叫函式時，會暫停目前執行的程式碼，待函式執行結束後，再返回原來的程式碼位置繼續執行，呼叫函式的語法如下(引數的數量與型態，需符合函式原型的規範)，
函式名稱(引數, …);


8.	以下範例說明函式呼叫的過程，


(1)	從主函式 main()開始執行。
(2)	呼叫函式 C(3.14)，傳入的引數為 3.14，函式 C()被呼叫後，會宣告一參數 x 並指定為
3.14(float x = 3.14)。
(3)	執行函式 C()，直到遇到 return 指令，回傳 x*100，函式執行結束，返回原程式碼繼續執行。
(4)	將函式回傳值指定給變數 i(int i=314)。
(5)	寫在 return 之後的程式碼，不會執行。







9
 


9.	區域變數與全域變數
	區域變數	全域變數
種類	-	if、for、while 結構內宣告的變數
-	函式的參數
-	函式內部宣告的變數	函式外部宣告的變數
存取權	只能在所在的程式區塊(即左右大括號{  }包
圍的部份)內被存取	在程式的任何位置都可以存取
生命週期	程式區塊結束即消失	程式結束才消失

10.	程式執行時，每個變數存在的時間不同，稱為變數的  命週期。下列程式碼宣告 1 個全域變數 a 和 3 個區域變數 b、c 和 i，變數建立(作業系統配置記憶體)和消失(作業系統回收記憶體)的時間順序如下，其中 for 迴圈內的區域變數 c，每執行一次迴圈即消失(5)，進入迴圈時再重新建立(4)，共重覆 10 回合。
(1)	建立全域變數 a
(2)	建立 main()的區域變數 b
(3)	建立 A()的區域變數 i
(4)	建立 for 迴圈的區域變數 c
(5)	for 迴圈的區域變數 c 消失
(6)	A()的區域變數 i 消失
(7)	main()的區域變數 b 消失
(8)	全域變數 a 消失

1.  int a=1;	/* 全域變數 a */	(1)

2.	
3. void A(){	
4.	int i=0;	/* 函式 A()的區域變數 i */	(3)
	
5.	for(i=0; i<10; i++){		
6.	int c=0;	/* for 迴圏的區域變數 c */	(4)
	
7.	c=c+i;
×			
8.	}
(5)
×		
9. }
(6)		
10.	
11. int main(void)	
12. {	
13.	int b=0;	/* 主函式 main()的區域變數 b */	(2)
	
14.	A();	×	×	
15. }
(7)	(8)



10
 


11.	不同程式區塊的區域變數，因存在於記憶體的不同位置，因此允許使用相同的變數名稱，存取時，採由內而外的方式，優先存取同一程式區塊內的區域變數，若區域變數不存在，則往上一層尋找。下例的第 1、4、6、18 行皆宣告一名稱為 s 的變數，虛線指向存取的對象，第 13 行因函式 B()內無區域變數 s，故存取對象為上一層的全域變數 s。

















18.	int s = 3;	/* 主函式 main()的區域變數 s */
19.	A();	
20.	B();	
21.	s=s+1;	
22. }		
12.	重載(Overload)函式：C++允許在函式的參數個數或參數資料型態不同時，使用相同的函式
名稱，下例為 3  個名稱相同的重載函式，根據參數的不同，自動呼叫不同的函式。
void myFun(int, int, int) { … } void myFun(int) { … }
void myFun(double) { … }
C  語言不允許函式重載，但允許運算子重載，如運算子「-j可以是負號或減號兩種功能。





11
 


13.	函式自已呼叫自已，稱為遞迴函式(Recursive  Function)，遞迴函式必須具備至少一個終止條件，否則函式將無法結束，下面是一個計算 n!  (n  階層)的函式 K(  )，執行 K(3)會回傳 3x2x1x1，函式執行的過程如下。
1. int K(int n){
2.	if (n == 0)	/* 終止條件：當n=0 時，不再呼叫自己 */
3.	return 1;
4.	else
5.	return n * K(n-1); /* 呼叫自己 */
6. }
14.	遞迴函式的優點是程式較簡潔明確且可讀性較高，缺點是執行效率低，會佔用較多記憶體
  間。

世界衛 組  建議以身體質量指數(BMI)來衡量肥胖程度，請建立一自訂函式 bmi( )，該函式會回傳 BMI 值。BMI 的計算公式為 BMI  體重(kg)
身高(m)2

程式碼：
1. #include <stdio.h>
2.  #include <math.h>
3.
4. double bmi(double, double); /* 宣告函式原型 */
5.
6. double bmi(double height, double weight){ /* 函式定義 */
7.	double bmiVal;
8.	bmiVal=weight/pow(height/100, 2);
9.	return bmiVal;
10. }
11.
12. int main(){
13.	double height, weight;
14.
15.	printf("請輸入身高(cm):");
16.	scanf("%lf", &height);
17.	printf("請輸入體重(kg):");
18.	scanf("%lf", &weight);
19.
20.	printf("%lf", bmi(height, weight));	/* 呼叫函式 bmi()，直接輸出回傳恒 */
21. }

12
 


程式碼說明：
行數	說明
2	引用數學函式庫<math.h>。
4	宣告 bmi( )函式原型：規範 2 個 double 型態的參數，回傳值也必需是 double 型態。
6 ~ 10	函式定義：實作 BMI 的計算公式，參數 height 和 weight 負責接收傳入的引數。
8	計算 BMI 值，利用 pow()函式進行次方運算。
9	回傳 BMI 值。
15 ~ 18	使用者輸入身高和體重。
20	呼叫 bmi( )函式，提供引數 height 和 weight。
6， 13	bmi( )和 main( )都有 height 和 weight 變數，因為不同函式的區域變數彼此獨立，所以變數名稱相同並不會造成編譯錯誤。

費式數列，由義大利人費先 提出，該數列由 0 和 1 開始，之後的每個數為前兩個數字相加，舉列如下：0， 1， 1， 2， 3， 5， 8， 13， 21， 34.，現在，費先 請你幫忙設計一遞迴函式 fib( )，該函式可以直接回傳一費式數列的值(例如 fib(5)會回傳 5)。

程式碼：
1. int fib(int);
2.
3.  int fib(int x){
4.	if (x == 0){	/* 終止條件— */
5.	return 0;
6.	}
7.	else if (x == 1){	/* 終止條件二 */
8.	return 1;
9.	}
10.	else{
11.	return fib(x-1)+fib(x-2);	/* 呼叫自己 */
12.	}
13. }






13
 


程式碼說明：
行數	說明
1	函式原型宣告，規範 1 個 int 型態的參數，且需回傳一 int 資料。
3 ~ 13	fib( )函式定義，有兩個終止條件，當 x==0 或 x==1 時，函式結束，並回傳 0 或 1。
11	不符合終止條件時，fib(  )會呼叫自己，以  fib(5)為例，此遞迴函式的執行過程如下，

 

 

     
 	 	 	 

 

就讀國小六年級的表妹正在學習利用輾轉相除法來取得 2 個整數的最大公因數，請你幫表妹設計一遞迴函式 GcD( )，該函式會回傳 2 個整數的最大公因數(例如 GcD(9， 12)會回傳 3)。

程式碼：
1. int GCD(int, int);
2.
3. int GCD(int x, int y){
4.	int r;
5.	r = x % y;
6.	if (r == 0)	/* 終止條件 */
7.	return y;
8.	return GCD(y, r);	/* 呼叫自己 */
9. }








14
 


程式碼說明：
行數	說明
1	函式原型宣告，規範 2 個整數型態的參數，且需回傳一整數資料。
3 ~ 9	GcD( )函式定義，終止條件為 r==0，此時函式結束並回傳最大公因數 y。
11	不符合終止條件時，GcD( )會呼叫自己，以 GcD(9， 12)為例，此遞迴函式的執行過程如下，
 




1.	函式使用參數(parameter)來接收外部傳入的資料，資料可以是變數或陣列。
2.	傳遞變數的方式：
(1)	傳值呼叫(call by value)
資料以值的型式傳遞，函式的參數是一般變數，其值等於來源變數的值，參數和來源變數分別存在於記憶體的不同位置，所以參數的改變不會影響來源變數的值。
以下列程式碼為例，在 byValue( )內部將參數 x 指定為 100，並不會改變 main( )中變數 a 的值(a 的值仍然是 10)。

1. void byValue(int x){	/*	參數 x 是—般變數 */
2.	printf("%d\n", x);	/*	輸出 10 */
3.	x = 100;	/*	指定參數 x 的恒為 100 */
4. }
5.  int main(){
6.	int a = 10;
7.	byValue(a);	/*	呼叫byValue()，傳遞的引數是變數A 的恒  */
8.	printf("%d\n", a);	/*	變數 a 的恒不變，依舊是 10 */
9. }
程式執行時，變數在記憶體內的變化如下：第 6 行，宣告變數 a


第 7 行，呼叫函式 byValue(a)，採傳值呼叫，等同於執行 int  x=a;


第 3 行，將參數 x 指定為 100


第 4 行，函式結束，參數 x 消失，返回第 8 行

(2)	傳址呼叫(call by address)
資料以位址的型式傳遞，函式的參數是指標變數，其值是來源變數的位址，當參數指向的記憶體內容改變時，來源變數的值也會跟著改變。
以下列程式碼為例，第 7 行呼叫byAddr( )時，傳入的引數是變數 a 的位址，此時 byAddr( )的參數 x 會指向來源變數 a，所以當 x 指向的記憶體內容被指定為 100 時，main( )中變數 a 的值也會改變(a 的值變成 100)。

21
 


1. void byAddr(int *x){	/* 參數 x 是指標變數 */
2.	printf("%d\n", *x); /* 輸出 10 */
3.	*x = 100;	/* 指定參數 x 指向的記憶體位址的內容為 100 */
4. }
5.  int main(){
6.	int a = 10;
7.	byAddr(&a);	/* 呼叫byAddr()，傳遞的引數是變數a 的位址 */
8.	printf("%d\n", a); /* 變數 a 的恒已經變成 100 */
9. }
程式執行時，變數在記憶體內的變化如下：第 6 行，宣告變數 a


第 7 行，呼叫函式 byValue(&a)，採傳址呼叫，等同於執行 int  *x=&a;






第 3 行，將 x 指向的記憶體內容，指定為 100






第 4 行，函式結束，參數 x 消失，返回第 8 行

取址運算子「&j，取得某個變數的記憶體位址。
取恒運算子「*j，存取指標變數指向的記憶體內容。








22
 


3.	傳遞陣列資料時，需同時提供陣列和元素個數，函式有 2  種接收陣列資料的方式：
(1)	以陣列的方式接收，在函式內部使用陣列索引存取陣列元素

1.   /*  宣告函式原型：規範參數的型態為整數陣列(用int[]表示)和整數變數  */
2. void G(int[], int);
3.
4. /* 定義函式：宣告 2 個參數分�為整數陣列 x[]和整數變數 xLen */
5. void G(int x[], int xLen){
6.	for (int i=0; i<xLen; i++){
7.	x[i]=x[i]+1; /* 以陣列索引的方式存取陣列元素 */
8.	}
9. }
(2)	以指標的方式接收，在函式內部使用指標存取陣列元素

1. /* 宣告函式原型：規範參數的型態為指標變數和整數變數 */
2. void F(int*, int);
3.
4. /* 函式定義：宣告 2 個參數分�為指標變數x 和整數變數 xLen */
5.  void F(int *x, int xLen){
6.	for (int i=0; i<xLen; i++){
7.	*(x+i) = *(x+i)+1; /* 以指標的方式存取陣列元素 */
8.	}
9. }
4.	呼叫上述函式 G( )或函式 F( )，均需要提供 2 個引數，分別為陣列名稱(第 1 個元素的指標)和元素個數，只要在函式內改變陣列的內容，來源陣列的內容也會跟者改變。

1. int main(){
2.	int a[5] = {1,2,3,4,5};
3.	G(a, 5);	/* 呼叫函式 G()，函式結束後，陣列內容變成 2 3 4 5 6 */
4.	F(a, 5);	/* 呼叫函式 F()，函式結束後，陣列內容變成 3 4 5 6 7 */
5. }












23
 


某量販店推出消費打 9 折，滿干再送百的快閃活動，即消費  額打 9 折，折後每滿 1000 元，再贈送 1 張 100 元的折價卷，請以傳址呼叫的方式設計一函式 shopback( )，計算打折後的消費
  額，並顯示獲得的折價卷張數。

程式碼：
1. #include <stdio.h>
2.
3.  void shopback(int*);	/* 函式原型宣告，規範參數是指標變數 */
4.
5. void shopback(int *x){ /* 宣告參數 x 是指標變數 */
6.	int coupon;
7.
8.	*x = (*x)*0.9;
9.	coupon = *x / 1000;
10.
11.	printf("獲得 %d 張折價卷\n", coupon);
12. }
13.
14. int main(){
15.	int m;
16.
17.	printf("請輸入消費金額：");
18.	scanf("%d", &m);
19.
20.	shopback(&m);	/* 呼叫shopback()，引數是變數m 的位址 */
21.	printf("打折後的消費金額 %d", m);
22. }
程式碼說明：
行數	說明
3	shopback(  )函式原型宣告，規範參數的型態為指標變數。
5 ~ 12	shopback( )函式定義，當第 20 行呼叫 shopback( )時，參數 x 會指向 main( )中的變數 m。
8	使用取值運算子「＊j，存取 x 指向的記憶體內容，當＊x 改變時，main( )中的變數 m 也會跟著改變。
20	呼叫 shopback( )函式，引數是變數 m 的位址（使用使用取址運算子「＆j）。


24
 


07	
設計一自訂函式 arrMax(  )，傳入整數陣列，該函式會回傳陣列中最大值的索引，並使用此函式改寫 P5-5 範例 03。

程式碼：
 
程式碼說明：
行數	說明
3	arrMax(  )函式原型宣告，規範參數的型態為整數陣列和整數變數。
5 ~ 12	arrMax( )函式定義，宣告 2 個參數，分別為整數陣列 arr[ ]和整數變數 len，使用陣列索引的方式存取陣列，找出最高營業額的月份 max，將 max 回傳。
16	呼叫 arrMax( )函式，提供 2 個引數，分別為陣列名稱和元素個數。






25
 


08	
寫出以下程式執行後之輸出結果？

1. void F(char a[]) {
2.	int n, i;
3.	char t;
4.	if (a[0] != '\0') {
5.	for (n=0; a[n]!='\0'; n++);
6.	t = a[n-1];
7.	for (i=n-1; i>0; i--) {
8.	a[i] = a[i-1];
9.	}
10.	a[0] = t;
11.	F(a+1);
12.	}
13. }
14. int main() {
15.	char a[] = "HELLOWORLD";
16.	F(a);
17.	printf("%s", a);
18.	return 0;
19. }

	 	

   

 

   

 

   
 
