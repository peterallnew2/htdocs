<!DOCTYPE html>
<html lang="zh-Hant">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>C 語言 第四章 詳細追蹤練習 (WASM & MathJax)</title>

    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-c.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js" async></script>
    <script src="https://cdn.jsdelivr.net/npm/emscripten-api/emscripten-api.min.js"></script>

    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            overflow: hidden;
            background-color: #1a1a1d;
            color: #f0f0f0;
        }
        #container {
            display: flex;
            height: 100vh;
        }
        #left-side {
            width: 45%;
            padding: 20px;
            overflow-y: auto;
            background-color: #2c2c2e;
            box-sizing: border-box;
            height: 100%;
        }
        #resizer {
            width: 8px;
            height: 100vh;
            background: #444;
            cursor: col-resize;
            flex-shrink: 0;
            position: relative;
        }
        #resizer:hover {
            background: #666;
        }
        #resizer.is-dragging {
            background: #007acc;
        }
        #right-side {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            height: 100%;
            overflow: hidden;
        }
        #editor-container {
            position: relative;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }
        #code-editor {
            flex-grow: 1;
            font-family: 'Fira Code', 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.5;
            background-color: #2d2d2d;
            color: #f8f8f2;
            border: none;
            outline: none;
            padding: 15px;
            resize: none;
            box-sizing: border-box;
        }
        #output-container {
            height: 200px;
            background-color: #1e1e1e;
            padding: 15px;
            overflow-y: auto;
            font-family: 'Consolas', 'Monaco', monospace;
            font-size: 14px;
            border-top: 1px solid #444;
            box-sizing: border-box;
            white-space: pre-wrap;
            word-wrap: break-word;
        }
        button {
            padding: 10px 15px;
            font-size: 16px;
            cursor: pointer;
            background-color: #007acc;
            color: white;
            border: none;
            border-radius: 5px;
            margin: 10px 0;
        }
        button:hover {
            background-color: #005f99;
        }
        h1, h2 {
            border-bottom: 2px solid #007acc;
            padding-bottom: 5px;
        }
        .code-sample-btn {
            display: block;
            width: 100%;
            text-align: left;
            margin-bottom: 8px;
            background-color: #3e3e42;
            border-radius: 3px;
        }
        .code-sample-btn:hover {
            background-color: #505054;
        }
    </style>
</head>
<body>
    <div id="container">
        <div id="left-side">
            <h1>C 語言第四章：詳細追蹤練習</h1>
            <p>
                這個互動式練習旨在幫助您深入理解 C 語言的基礎，特別是關於指標、陣列和記憶體操作的部分。
            </p>
            <p>
                <strong>使用說明：</strong> 點擊下方的「運行示例」按鈕，相關的 C 程式碼將會載入到右側的編輯器中。您可以直接修改程式碼，然後點擊「編譯並執行」按鈕，編譯結果 (WebAssembly) 將在下方輸出區顯示。
            </p>
            <h2>程式碼範例</h2>
            <div id="code-samples">
                </div>
            <p style="margin-top: 20px;">
                本站整合了 <strong>MathJax</strong>，能夠優雅地呈現數學與指標運算式。例如：
            </p>
            <ul>
                <li>指標 `p` 指向陣列 `arr`，存取第 `i` 個元素：`*(p + i)`</li>
                <li>計算 `double` 型別的大小：`sizeof(double)`</li>
                <li>二次方程式公式：$x = {-b \pm \sqrt{b^2-4ac} \over 2a}$</li>
            </ul>
        </div>
        <div id="resizer"></div>
        <div id="right-side">
            <div id="editor-container">
                <textarea id="code-editor" spellcheck="false"></textarea>
                <button id="run-button" style="position: absolute; top: 10px; right: 10px; z-index: 10;">編譯並執行</button>
            </div>
            <div id="output-container"><strong>輸出結果:</strong><br></div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const codeEditor = document.getElementById('code-editor');
            const runButton = document.getElementById('run-button');
            const outputContainer = document.getElementById('output-container');
            const samplesContainer = document.getElementById('code-samples');

            const codeSamples = {
                'q1-code': `// 範例 1: 基本指標操作
#include <stdio.h>

int main() {
    int var = 20;   
    int *p;      
    p = &var;    

    printf("Address of var variable: %p\\n", &var);
    printf("Address stored in p variable: %p\\n", p);
    printf("Value of *p variable: %d\\n", *p);

    return 0;
}`,
                'q2-code': `// 範例 2: 陣列與指標
#include <stdio.h>

int main() {
   int arr[5] = {10, 20, 30, 40, 50};
   int *p;

   p = arr; // or p = &arr[0];

   printf("Printing array elements using pointer:\\n");
   for (int i = 0; i < 5; i++) {
       printf("Value of *(p + %d) is %d\\n", i, *(p + i));
   }

   return 0;
}`,
                'q3-code': `// 範例 3: 交換兩個數字 (使用指標)
#include <stdio.h>

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int main() {
    int x = 100;
    int y = 200;

    printf("Before swap, value of x: %d\\n", x);
    printf("Before swap, value of y: %d\\n", y);

    swap(&x, &y);

    printf("After swap, value of x: %d\\n", x);
    printf("After swap, value of y: %d\\n", y);

    return 0;
}`,
 'q4-code': `// 範例 4: 指標的大小
#include <stdio.h>

int main() {
    int *p_int;
    char *p_char;
    double *p_double;

    printf("Size of integer pointer: %lu bytes\\n", sizeof(p_int));
    printf("Size of char pointer: %lu bytes\\n", sizeof(p_char));
    printf("Size of double pointer: %lu bytes\\n", sizeof(p_double));

    return 0;
}`
            };

            // Populate sample buttons
            Object.keys(codeSamples).forEach((key, index) => {
                const btn = document.createElement('button');
                btn.className = 'code-sample-btn';
                btn.textContent = `運行示例 ${index + 1}`;
                btn.onclick = () => {
                    codeEditor.value = codeSamples[key];
                    Prism.highlightAll();
                };
                samplesContainer.appendChild(btn);
            });

            const emcc = new EmscriptenCompiler();

            runButton.addEventListener('click', async () => {
                const code = codeEditor.value;
                outputContainer.innerHTML = '<strong>輸出結果:</strong><br>正在編譯並執行...';

                try {
                    const result = await emcc.compile(code, '-O2');
                    if (result.success) {
                        const { wasm, stdout, stderr } = await emcc.run(result.wasm);
                        let output = `<strong>輸出結果:</strong><br>`;
                        if (stdout) output += `STDOUT:<br><pre>${stdout}</pre>`;
                        if (stderr) output += `STDERR:<br><pre>${stderr}</pre>`;
                        if (!stdout && !stderr) output += '程式執行完畢，沒有任何輸出。';
                        outputContainer.innerHTML = output;
                    } else {
                        outputContainer.innerHTML = `<strong>編譯錯誤:</strong><br><pre>${result.error}</pre>`;
                    }
                } catch (error) {
                    console.error('Emscripten API Error:', error);
                    outputContainer.innerHTML = `<strong>執行時錯誤:</strong><br><pre>${error.toString()}</pre>`;
                }
            });

            // Resizer logic
            const resizer = document.getElementById('resizer');
            const leftSide = document.getElementById('left-side');
            
            const mouseDownHandler = function(e) {
                e.preventDefault();
                resizer.classList.add('is-dragging');

                const x = e.clientX;
                const leftWidth = leftSide.getBoundingClientRect().width;
                
                // Create a transparent overlay to capture mouse events globally
                const overlay = document.createElement('div');
                overlay.style.position = 'fixed';
                overlay.style.top = 0;
                overlay.style.left = 0;
                overlay.style.width = '100%';
                overlay.style.height = '100%';
                overlay.style.cursor = 'col-resize';
                overlay.style.zIndex = '9999';
                document.body.appendChild(overlay);

                document.addEventListener('mousemove', mouseMoveHandler);
                document.addEventListener('mouseup', mouseUpHandler);

                function mouseMoveHandler(e_move) {
                    const dx = e_move.clientX - x;
                    const newLeftWidth = leftWidth + dx;
                    // Add min/max width constraints if necessary
                    if (newLeftWidth > 200 && newLeftWidth < (document.body.clientWidth - 250)) { // Basic constraints
                       leftSide.style.width = `${newLeftWidth}px`;
                    }
                }

                function mouseUpHandler() {
                    resizer.classList.remove('is-dragging');
                    document.body.removeChild(overlay);
                    document.removeEventListener('mousemove', mouseMoveHandler);
                    document.removeEventListener('mouseup', mouseUpHandler);
                }
            };
            resizer.addEventListener('mousedown', mouseDownHandler);

            // Set initial code in editor
            if (codeSamples['q1-code']) { // Check if q1-code exists, otherwise fallback
                 codeEditor.value = codeSamples['q1-code'];
            } else if (Object.keys(codeSamples).length > 0) {
                 codeEditor.value = codeSamples[Object.keys(codeSamples)[0]]; // Fallback to the first sample
            } else {
                 codeEditor.value = "// Welcome! Select a question with a code example, or write your own C code here.";
            }
        });
    </script>
</body>
</html>